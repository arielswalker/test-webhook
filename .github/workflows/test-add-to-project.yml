name: Add issue or PR to project

on:
  issues:
    types: [opened]
  pull_request:
    types: 
      - opened
      - reopened // remove after testing

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Add to GitHub Project
        uses: actions/add-to-project@v1.0.2
        with:
          project-url: https://github.com/users/arielswalker/projects/2
          github-token: ${{ secrets.ADD_TO_PROJECT }}

      - name: Move PR to current iteration
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADD_TO_PROJECT }} 
          script: |
            const projectId = "PVT_kwHOCeen4M4A25Dg";
            const iterationFieldId = "PVTIF_lAHOCeen4M4A25DgzgsH0y4"; 
            const prId = context.payload.pull_request.node_id;

            // Get current iteration
            const iterationData = await github.graphql(`
              query ($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2IterationField {
                          id
                          name
                          configuration {
                            iterations {
                              id
                              title
                              startDate
                              duration
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, {
              projectId
            });

            const iterationField = iterationData.node.fields.nodes.find(f => f.id === iterationFieldId);
            const today = new Date();

            const currentIteration = iterationField.configuration.iterations.find(iter => {
              const start = new Date(iter.startDate);
              const end = new Date(start);
              end.setDate(start.getDate() + iter.duration * 7);
              return today >= start && today <= end;
            });

            if (!currentIteration) {
              core.setFailed("No current iteration found.");
              return;
            }

            // Add PR to project
            const addItem = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }
            `, {
              projectId,
              contentId: prId
            });

            const itemId = addItem.addProjectV2ItemById.item.id;

            // Set iteration field
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: $value
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, {
              projectId,
              itemId,
              fieldId: iterationFieldId,
              value: {
                iterationId: currentIteration.id
              }
            });

            console.log("PR moved to current iteration");
